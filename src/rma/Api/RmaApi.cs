/*
 * RMA Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using rma.Client;
using rma.Model;

namespace rma.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRmaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a note to an RMA
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaNoteResponse</returns>
        RmaNoteResponse AddNote(RmaAddNoteRequest body, int operationIndex = 0);

        /// <summary>
        /// Add a note to an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaNoteResponse</returns>
        ApiResponse<RmaNoteResponse> AddNoteWithHttpInfo(RmaAddNoteRequest body, int operationIndex = 0);
        /// <summary>
        /// Approve a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RpcStatus</returns>
        RpcStatus ApproveReturn(RmaApproveReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Approve a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RpcStatus</returns>
        ApiResponse<RpcStatus> ApproveReturnWithHttpInfo(RmaApproveReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// Cancel a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CancelReturn(RmaCancelReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Cancel a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelReturnWithHttpInfo(RmaCancelReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// Confirm return approve items
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ConfirmReturnApproveItems(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// Confirm return approve items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConfirmReturnApproveItemsWithHttpInfo(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// Create a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaReturnResponse</returns>
        RmaReturnResponse CreateReturn(RmaCreateReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Create a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaReturnResponse</returns>
        ApiResponse<RmaReturnResponse> CreateReturnWithHttpInfo(RmaCreateReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete a note from an RMA
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteNote(RmaDeleteNoteRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete a note from an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteNoteWithHttpInfo(RmaDeleteNoteRequest body, int operationIndex = 0);
        /// <summary>
        /// Edit a note on an RMA
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaNoteResponse</returns>
        RmaNoteResponse EditNote(RmaEditNoteRequest body, int operationIndex = 0);

        /// <summary>
        /// Edit a note on an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaNoteResponse</returns>
        ApiResponse<RmaNoteResponse> EditNoteWithHttpInfo(RmaEditNoteRequest body, int operationIndex = 0);
        /// <summary>
        /// Get a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaReturnResponse</returns>
        RmaReturnResponse GetReturn(RmaGetReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Get a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaReturnResponse</returns>
        ApiResponse<RmaReturnResponse> GetReturnWithHttpInfo(RmaGetReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// List notes by return id
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaListNotesByReturnIdResponse</returns>
        RmaListNotesByReturnIdResponse ListNotesByReturnId(RmaListNotesByReturnIdRequest body, int operationIndex = 0);

        /// <summary>
        /// List notes by return id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaListNotesByReturnIdResponse</returns>
        ApiResponse<RmaListNotesByReturnIdResponse> ListNotesByReturnIdWithHttpInfo(RmaListNotesByReturnIdRequest body, int operationIndex = 0);
        /// <summary>
        /// List returns
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaListReturnsResponse</returns>
        RmaListReturnsResponse ListReturns(RmaListReturnsRequest body, int operationIndex = 0);

        /// <summary>
        /// List returns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaListReturnsResponse</returns>
        ApiResponse<RmaListReturnsResponse> ListReturnsWithHttpInfo(RmaListReturnsRequest body, int operationIndex = 0);
        /// <summary>
        /// Refund a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RefundReturn(RmaRefundReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Refund a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RefundReturnWithHttpInfo(RmaRefundReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// Reject a return
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RejectReturn(RmaRejectReturnRequest body, int operationIndex = 0);

        /// <summary>
        /// Reject a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RejectReturnWithHttpInfo(RmaRejectReturnRequest body, int operationIndex = 0);
        /// <summary>
        /// Set received items
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SetReceivedItems(RmaSetReceivedItemsRequest body, int operationIndex = 0);

        /// <summary>
        /// Set received items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetReceivedItemsWithHttpInfo(RmaSetReceivedItemsRequest body, int operationIndex = 0);
        /// <summary>
        /// Skip a return status
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SkipReturnStatus(RmaSkipReturnStatusRequest body, int operationIndex = 0);

        /// <summary>
        /// Skip a return status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SkipReturnStatusWithHttpInfo(RmaSkipReturnStatusRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRmaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a note to an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaNoteResponse</returns>
        System.Threading.Tasks.Task<RmaNoteResponse> AddNoteAsync(RmaAddNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add a note to an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaNoteResponse>> AddNoteWithHttpInfoAsync(RmaAddNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Approve a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RpcStatus</returns>
        System.Threading.Tasks.Task<RpcStatus> ApproveReturnAsync(RmaApproveReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Approve a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RpcStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RpcStatus>> ApproveReturnWithHttpInfoAsync(RmaApproveReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Cancel a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelReturnAsync(RmaCancelReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelReturnWithHttpInfoAsync(RmaCancelReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Confirm return approve items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConfirmReturnApproveItemsAsync(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Confirm return approve items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConfirmReturnApproveItemsWithHttpInfoAsync(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaReturnResponse</returns>
        System.Threading.Tasks.Task<RmaReturnResponse> CreateReturnAsync(RmaCreateReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaReturnResponse>> CreateReturnWithHttpInfoAsync(RmaCreateReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a note from an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteNoteAsync(RmaDeleteNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a note from an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNoteWithHttpInfoAsync(RmaDeleteNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit a note on an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaNoteResponse</returns>
        System.Threading.Tasks.Task<RmaNoteResponse> EditNoteAsync(RmaEditNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit a note on an RMA
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaNoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaNoteResponse>> EditNoteWithHttpInfoAsync(RmaEditNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaReturnResponse</returns>
        System.Threading.Tasks.Task<RmaReturnResponse> GetReturnAsync(RmaGetReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaReturnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaReturnResponse>> GetReturnWithHttpInfoAsync(RmaGetReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List notes by return id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListNotesByReturnIdResponse</returns>
        System.Threading.Tasks.Task<RmaListNotesByReturnIdResponse> ListNotesByReturnIdAsync(RmaListNotesByReturnIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List notes by return id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListNotesByReturnIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaListNotesByReturnIdResponse>> ListNotesByReturnIdWithHttpInfoAsync(RmaListNotesByReturnIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List returns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListReturnsResponse</returns>
        System.Threading.Tasks.Task<RmaListReturnsResponse> ListReturnsAsync(RmaListReturnsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List returns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListReturnsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RmaListReturnsResponse>> ListReturnsWithHttpInfoAsync(RmaListReturnsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Refund a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RefundReturnAsync(RmaRefundReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Refund a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefundReturnWithHttpInfoAsync(RmaRefundReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reject a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RejectReturnAsync(RmaRejectReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reject a return
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectReturnWithHttpInfoAsync(RmaRejectReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Set received items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetReceivedItemsAsync(RmaSetReceivedItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Set received items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetReceivedItemsWithHttpInfoAsync(RmaSetReceivedItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Skip a return status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SkipReturnStatusAsync(RmaSkipReturnStatusRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Skip a return status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SkipReturnStatusWithHttpInfoAsync(RmaSkipReturnStatusRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRmaApi : IRmaApiSync, IRmaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RmaApi : IRmaApi
    {
        private rma.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RmaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RmaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RmaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RmaApi(string basePath)
        {
            this.Configuration = rma.Client.Configuration.MergeConfigurations(
                rma.Client.GlobalConfiguration.Instance,
                new rma.Client.Configuration { BasePath = basePath }
            );
            this.Client = new rma.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new rma.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = rma.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RmaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RmaApi(rma.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = rma.Client.Configuration.MergeConfigurations(
                rma.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new rma.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new rma.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = rma.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RmaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RmaApi(rma.Client.ISynchronousClient client, rma.Client.IAsynchronousClient asyncClient, rma.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = rma.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public rma.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public rma.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public rma.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public rma.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a note to an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaNoteResponse</returns>
        public RmaNoteResponse AddNote(RmaAddNoteRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaNoteResponse> localVarResponse = AddNoteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a note to an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaNoteResponse</returns>
        public rma.Client.ApiResponse<RmaNoteResponse> AddNoteWithHttpInfo(RmaAddNoteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->AddNote");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.AddNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaNoteResponse>("/rma.Rma/AddNote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a note to an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaNoteResponse</returns>
        public async System.Threading.Tasks.Task<RmaNoteResponse> AddNoteAsync(RmaAddNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaNoteResponse> localVarResponse = await AddNoteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a note to an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaNoteResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaNoteResponse>> AddNoteWithHttpInfoAsync(RmaAddNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->AddNote");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.AddNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaNoteResponse>("/rma.Rma/AddNote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RpcStatus</returns>
        public RpcStatus ApproveReturn(RmaApproveReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RpcStatus> localVarResponse = ApproveReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RpcStatus</returns>
        public rma.Client.ApiResponse<RpcStatus> ApproveReturnWithHttpInfo(RmaApproveReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ApproveReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ApproveReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RpcStatus>("/rma.Rma/ApproveReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RpcStatus</returns>
        public async System.Threading.Tasks.Task<RpcStatus> ApproveReturnAsync(RmaApproveReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RpcStatus> localVarResponse = await ApproveReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RpcStatus)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RpcStatus>> ApproveReturnWithHttpInfoAsync(RmaApproveReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ApproveReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ApproveReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RpcStatus>("/rma.Rma/ApproveReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApproveReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CancelReturn(RmaCancelReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = CancelReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> CancelReturnWithHttpInfo(RmaCancelReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->CancelReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.CancelReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/CancelReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelReturnAsync(RmaCancelReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await CancelReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> CancelReturnWithHttpInfoAsync(RmaCancelReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->CancelReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.CancelReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/CancelReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm return approve items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ConfirmReturnApproveItems(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = ConfirmReturnApproveItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm return approve items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> ConfirmReturnApproveItemsWithHttpInfo(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ConfirmReturnApproveItems");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ConfirmReturnApproveItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/ConfirmReturnApproveItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmReturnApproveItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Confirm return approve items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConfirmReturnApproveItemsAsync(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await ConfirmReturnApproveItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Confirm return approve items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> ConfirmReturnApproveItemsWithHttpInfoAsync(RmaConfirmReturnApproveItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ConfirmReturnApproveItems");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ConfirmReturnApproveItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/ConfirmReturnApproveItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConfirmReturnApproveItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaReturnResponse</returns>
        public RmaReturnResponse CreateReturn(RmaCreateReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaReturnResponse> localVarResponse = CreateReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaReturnResponse</returns>
        public rma.Client.ApiResponse<RmaReturnResponse> CreateReturnWithHttpInfo(RmaCreateReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->CreateReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.CreateReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaReturnResponse>("/rma.Rma/CreateReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaReturnResponse</returns>
        public async System.Threading.Tasks.Task<RmaReturnResponse> CreateReturnAsync(RmaCreateReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaReturnResponse> localVarResponse = await CreateReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaReturnResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaReturnResponse>> CreateReturnWithHttpInfoAsync(RmaCreateReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->CreateReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.CreateReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaReturnResponse>("/rma.Rma/CreateReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a note from an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteNote(RmaDeleteNoteRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = DeleteNoteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a note from an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> DeleteNoteWithHttpInfo(RmaDeleteNoteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->DeleteNote");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.DeleteNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/DeleteNote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a note from an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteNoteAsync(RmaDeleteNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await DeleteNoteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a note from an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> DeleteNoteWithHttpInfoAsync(RmaDeleteNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->DeleteNote");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.DeleteNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/DeleteNote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a note on an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaNoteResponse</returns>
        public RmaNoteResponse EditNote(RmaEditNoteRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaNoteResponse> localVarResponse = EditNoteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a note on an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaNoteResponse</returns>
        public rma.Client.ApiResponse<RmaNoteResponse> EditNoteWithHttpInfo(RmaEditNoteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->EditNote");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.EditNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaNoteResponse>("/rma.Rma/EditNote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit a note on an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaNoteResponse</returns>
        public async System.Threading.Tasks.Task<RmaNoteResponse> EditNoteAsync(RmaEditNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaNoteResponse> localVarResponse = await EditNoteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a note on an RMA 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaNoteResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaNoteResponse>> EditNoteWithHttpInfoAsync(RmaEditNoteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->EditNote");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.EditNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaNoteResponse>("/rma.Rma/EditNote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaReturnResponse</returns>
        public RmaReturnResponse GetReturn(RmaGetReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaReturnResponse> localVarResponse = GetReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaReturnResponse</returns>
        public rma.Client.ApiResponse<RmaReturnResponse> GetReturnWithHttpInfo(RmaGetReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->GetReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.GetReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaReturnResponse>("/rma.Rma/GetReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaReturnResponse</returns>
        public async System.Threading.Tasks.Task<RmaReturnResponse> GetReturnAsync(RmaGetReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaReturnResponse> localVarResponse = await GetReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaReturnResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaReturnResponse>> GetReturnWithHttpInfoAsync(RmaGetReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->GetReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.GetReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaReturnResponse>("/rma.Rma/GetReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notes by return id 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaListNotesByReturnIdResponse</returns>
        public RmaListNotesByReturnIdResponse ListNotesByReturnId(RmaListNotesByReturnIdRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaListNotesByReturnIdResponse> localVarResponse = ListNotesByReturnIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List notes by return id 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaListNotesByReturnIdResponse</returns>
        public rma.Client.ApiResponse<RmaListNotesByReturnIdResponse> ListNotesByReturnIdWithHttpInfo(RmaListNotesByReturnIdRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ListNotesByReturnId");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ListNotesByReturnId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaListNotesByReturnIdResponse>("/rma.Rma/ListNotesByReturnId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotesByReturnId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notes by return id 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListNotesByReturnIdResponse</returns>
        public async System.Threading.Tasks.Task<RmaListNotesByReturnIdResponse> ListNotesByReturnIdAsync(RmaListNotesByReturnIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaListNotesByReturnIdResponse> localVarResponse = await ListNotesByReturnIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List notes by return id 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListNotesByReturnIdResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaListNotesByReturnIdResponse>> ListNotesByReturnIdWithHttpInfoAsync(RmaListNotesByReturnIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ListNotesByReturnId");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ListNotesByReturnId";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaListNotesByReturnIdResponse>("/rma.Rma/ListNotesByReturnId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotesByReturnId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List returns 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RmaListReturnsResponse</returns>
        public RmaListReturnsResponse ListReturns(RmaListReturnsRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<RmaListReturnsResponse> localVarResponse = ListReturnsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List returns 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RmaListReturnsResponse</returns>
        public rma.Client.ApiResponse<RmaListReturnsResponse> ListReturnsWithHttpInfo(RmaListReturnsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ListReturns");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ListReturns";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RmaListReturnsResponse>("/rma.Rma/ListReturns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReturns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List returns 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RmaListReturnsResponse</returns>
        public async System.Threading.Tasks.Task<RmaListReturnsResponse> ListReturnsAsync(RmaListReturnsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<RmaListReturnsResponse> localVarResponse = await ListReturnsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List returns 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RmaListReturnsResponse)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<RmaListReturnsResponse>> ListReturnsWithHttpInfoAsync(RmaListReturnsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->ListReturns");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.ListReturns";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RmaListReturnsResponse>("/rma.Rma/ListReturns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReturns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RefundReturn(RmaRefundReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = RefundReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> RefundReturnWithHttpInfo(RmaRefundReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->RefundReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.RefundReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/RefundReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refund a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RefundReturnAsync(RmaRefundReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await RefundReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refund a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> RefundReturnWithHttpInfoAsync(RmaRefundReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->RefundReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.RefundReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/RefundReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefundReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RejectReturn(RmaRejectReturnRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = RejectReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> RejectReturnWithHttpInfo(RmaRejectReturnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->RejectReturn");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.RejectReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/RejectReturn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reject a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RejectReturnAsync(RmaRejectReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await RejectReturnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reject a return 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> RejectReturnWithHttpInfoAsync(RmaRejectReturnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->RejectReturn");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.RejectReturn";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/RejectReturn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RejectReturn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set received items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SetReceivedItems(RmaSetReceivedItemsRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = SetReceivedItemsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set received items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> SetReceivedItemsWithHttpInfo(RmaSetReceivedItemsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->SetReceivedItems");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.SetReceivedItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/SetReceivedItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetReceivedItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set received items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetReceivedItemsAsync(RmaSetReceivedItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await SetReceivedItemsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set received items 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> SetReceivedItemsWithHttpInfoAsync(RmaSetReceivedItemsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->SetReceivedItems");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.SetReceivedItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/SetReceivedItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetReceivedItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skip a return status 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SkipReturnStatus(RmaSkipReturnStatusRequest body, int operationIndex = 0)
        {
            rma.Client.ApiResponse<Object> localVarResponse = SkipReturnStatusWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Skip a return status 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public rma.Client.ApiResponse<Object> SkipReturnStatusWithHttpInfo(RmaSkipReturnStatusRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->SkipReturnStatus");
            }

            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.SkipReturnStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/rma.Rma/SkipReturnStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipReturnStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Skip a return status 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SkipReturnStatusAsync(RmaSkipReturnStatusRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            rma.Client.ApiResponse<Object> localVarResponse = await SkipReturnStatusWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Skip a return status 
        /// </summary>
        /// <exception cref="rma.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<rma.Client.ApiResponse<Object>> SkipReturnStatusWithHttpInfoAsync(RmaSkipReturnStatusRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new rma.Client.ApiException(400, "Missing required parameter 'body' when calling RmaApi->SkipReturnStatus");
            }


            rma.Client.RequestOptions localVarRequestOptions = new rma.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = rma.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = rma.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "RmaApi.SkipReturnStatus";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/rma.Rma/SkipReturnStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SkipReturnStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
